const getAngle = (p1, p2) => {
  const start = Math.atan2(p2.y - p1.y, p2.x - p1.x) - Math.PI / 2;
  return start >= 0 ? start : 2 * Math.PI + start;
};

const isSame = (p1, p2) => p1.x === p2.x && p1.y === p2.y;

const squareDistance = (p1, p2) =>
  Math.pow(p2.y - p1.y, 2) + Math.pow(p2.y - p1.y, 2);

const getAstroidGrid = (grid) => {
  const isAstroid = (p) => grid[p.y][p.x] !== ".";

  const astroids = [];
  for (let y = 0; y < grid.length; y++)
    for (let x = 0; x < grid[0].length; x++)
      if (isAstroid({ x, y })) astroids.push({ x, y });

  return astroids;
};

const maxNumVisible = (grid) => bestPoint(grid)[1];

const bestPoint = (grid) => {
  const astroids = getAstroidGrid(grid);
  let maxNumVisible = 0;
  let bestPoint = null;
  astroids.map((point) => {
    const angles = astroids
      .filter((astroid) => !isSame(astroid, point))
      .map((astroid) => getAngle(astroid, point));
    const currentNumVisible = new Set(angles).size;
    if (currentNumVisible > maxNumVisible) {
      maxNumVisible = currentNumVisible;
      bestPoint = point;
    }
  });
  return [bestPoint, maxNumVisible];
};

const nthAstroid = (grid, n) => {
  const astroids = getAstroidGrid(grid);
  const point = bestPoint(grid)[0];
  const angles = new Map();

  astroids
    .filter((astroid) => !isSame(astroid, point))
    .map((astroid) => {
      const angle = getAngle(astroid, point);
      const old = angles.get(angle) || [];
      angles.set(
        angle,
        [...old, astroid].sort(
          (a, b) => squareDistance(point, a) - squareDistance(point, b)
        )
      );
    });

  const order = Array.from(angles.keys()).sort();

  while (n > 0)
    for (let i = 0; i < order.length; i++) {
      const angle = order[i];
      const inDirection = angles.get(angle);
      if (inDirection.length === 0) {
        order.splice(i--, 1);
        continue;
      }
      const removed = inDirection.shift();
      n--;
      if (n === 0) return `${removed.x}0${removed.y}`;
      angles.set(angle, inDirection);
    }

  return null;
};

const finalInput = [
  [
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
  ],
  [
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
  ],
  [
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
  ],
  [
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
  ],
  [
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
  ],
  [
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
  ],
  [
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
  ],
  [
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
  ],
  [
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
  ],
  [
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
  ],
  [
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
  ],
  [
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
  ],
  [
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
  ],
  [
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
  ],
  [
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
  ],
  [
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    ".",
  ],
  [
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
  ],
  [
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
  ],
];

// Best is 3,4 with 8 other asteroids detected:
const input0 = [
  [".", "#", ".", ".", "#"],
  [".", ".", ".", ".", "."],
  ["#", "#", "#", "#", "#"],
  [".", ".", ".", ".", "#"],
  [".", ".", ".", "#", "#"],
];

// Best is 5,8 with 33 other asteroids detected:
const input1 = [
  [".", ".", ".", ".", ".", ".", "#", ".", "#", "."],
  ["#", ".", ".", "#", ".", "#", ".", ".", ".", "."],
  [".", ".", "#", "#", "#", "#", "#", "#", "#", "."],
  [".", "#", ".", "#", ".", "#", "#", "#", ".", "."],
  [".", "#", ".", ".", "#", ".", ".", ".", ".", "."],
  [".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
  ["#", ".", ".", "#", ".", ".", ".", ".", "#", "."],
  [".", "#", "#", ".", "#", ".", ".", "#", "#", "#"],
  ["#", "#", ".", ".", ".", "#", ".", ".", "#", "."],
  [".", "#", ".", ".", ".", ".", "#", "#", "#", "#"],
];

// Best is 1,2 with 35 other asteroids detected:
const input2 = [
  ["#", ".", "#", ".", ".", ".", "#", ".", "#", "."],
  [".", "#", "#", "#", ".", ".", ".", ".", "#", "."],
  [".", "#", ".", ".", ".", ".", "#", ".", ".", "."],
  ["#", "#", ".", "#", ".", "#", ".", "#", ".", "#"],
  [".", ".", ".", ".", "#", ".", "#", ".", "#", "."],
  [".", "#", "#", ".", ".", "#", "#", "#", ".", "#"],
  [".", ".", "#", ".", ".", ".", "#", "#", ".", "."],
  [".", ".", "#", "#", ".", ".", ".", ".", "#", "#"],
  [".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
  [".", "#", "#", "#", "#", ".", "#", "#", "#", "."],
];

// Best is 6,3 with 41 other asteroids detected:
const input3 = [
  [".", "#", ".", ".", "#", ".", ".", "#", "#", "#"],
  ["#", "#", "#", "#", ".", "#", "#", "#", ".", "#"],
  [".", ".", ".", ".", "#", "#", "#", ".", "#", "."],
  [".", ".", "#", "#", "#", ".", "#", "#", ".", "#"],
  ["#", "#", ".", "#", "#", ".", "#", ".", "#", "."],
  [".", ".", ".", ".", "#", "#", "#", ".", ".", "#"],
  [".", ".", "#", ".", "#", ".", ".", "#", ".", "#"],
  ["#", ".", ".", "#", ".", "#", ".", "#", "#", "#"],
  [".", "#", "#", ".", ".", ".", "#", "#", ".", "#"],
  [".", ".", ".", ".", ".", "#", ".", "#", ".", "."],
];

//11,13 with 210 other asteroids detected:
const input4 = [
  [
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
  ],
  [
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
  ],
  [
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
  ],
  [
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
  ],
  [
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
  ],
  [
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    ".",
    "#",
  ],
  [
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    ".",
    ".",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    ".",
    ".",
  ],
  [
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
  ],
  [
    ".",
    ".",
    ".",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    ".",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
  ],
  [
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    ".",
    "#",
    ".",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
  ],
  [
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    "#",
    "#",
    "#",
    ".",
    "#",
    "#",
    ".",
    "#",
    ".",
    ".",
    "#",
    "#",
  ],
];

var assert = require("assert");
describe("Day10", function () {
  describe("Part1", function () {
    it("sample inputs", function () {
      assert.equal(maxNumVisible(input0), 8);
      assert.equal(maxNumVisible(input1), 33);
      assert.equal(maxNumVisible(input2), 35);
      assert.equal(maxNumVisible(input3), 41);
      assert.equal(maxNumVisible(input4), 210);
    });
    it("desired test", function () {
      assert.equal(maxNumVisible(finalInput), 288);
    });
  });

  describe("Part2", function () {
    it("sample inputs", function () {
      assert.equal(nthAstroid(input4, 1), 11012);
      assert.equal(nthAstroid(input4, 2), 1201);
      assert.equal(nthAstroid(input4, 3), 1202);
      assert.equal(nthAstroid(input4, 10), 1208);
      assert.equal(nthAstroid(input4, 20), 1600);
      assert.equal(nthAstroid(input4, 50), 1609);
      assert.equal(nthAstroid(input4, 100), 10016);
      assert.equal(nthAstroid(input4, 199), 906);
      assert.equal(nthAstroid(input4, 200), 802);
      assert.equal(nthAstroid(input4, 201), 1009);
      assert.equal(nthAstroid(input4, 299), 1101);
    });
    it("desired test", function () {
      assert.equal(nthAstroid(finalInput, 200), 6016);
    });
  });
});
